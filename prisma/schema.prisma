// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  Boolean   @default(false)
  name           String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // CRM specific fields
  role      String   @default("member") // admin, member
  title     String?
  phone     String?
  isActive  Boolean  @default(true)

  // Auth relationships
  sessions  Session[]
  accounts  Account[]

  // Owned records
  contacts   Contact[]
  companies  Company[]
  deals      Deal[]
  activities Activity[]
  
  // Assigned records
  assignedContacts Contact[] @relation("AssignedContacts")
  assignedCompanies Company[] @relation("AssignedCompanies")
  assignedDeals    Deal[]    @relation("AssignedDeals")
  assignedActivities Activity[] @relation("AssignedActivities")
  
  // Transitions made by this user
  dealTransitions  DealTransition[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model Account {
  id                String   @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
  @@index([identifier])
}

model Contact {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  email      String?
  phone      String?
  title      String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedContacts", fields: [assignedToId], references: [id], onDelete: SetNull)

  deals      Deal[]
  activities Activity[] @relation("ActivityContacts")

  @@index([userId])
  @@index([companyId])
  @@index([assignedToId])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  website   String?
  industry  String?
  size      String?
  location  String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedCompanies", fields: [assignedToId], references: [id], onDelete: SetNull)

  contacts   Contact[]
  deals      Deal[]

  @@index([userId])
  @@index([assignedToId])
}

model Deal {
  id          String    @id @default(cuid())
  name        String
  value       Float?
  stage       String    @default("lead")
  position    Int       @default(0)
  closeDate   DateTime?
  probability Int?      @default(0)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedDeals", fields: [assignedToId], references: [id], onDelete: SetNull)

  activities Activity[]
  transitions DealTransition[]

  @@index([userId])
  @@index([companyId])
  @@index([contactId])
  @@index([assignedToId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // note, call, email, meeting
  subject     String
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multiple contacts can be associated with an activity
  contacts    Contact[] @relation("ActivityContacts")

  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id], onDelete: SetNull)

  // User who created this activity
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // User assigned to this activity
  assignedToId String?
  assignedTo   User?  @relation("AssignedActivities", fields: [assignedToId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([dealId])
  @@index([date])
  @@index([assignedToId])
}

model DealTransition {
  id            String   @id @default(cuid())
  dealId        String
  deal          Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  fromStage     String?  // null for initial creation
  toStage       String
  fromPosition  Int?
  toPosition    Int
  
  // Track value and probability at time of transition
  value         Float?
  probability   Int?
  
  // Who made the change
  changedById   String?
  changedBy     User?    @relation(fields: [changedById], references: [id], onDelete: SetNull)
  
  // When it happened
  transitionAt  DateTime @default(now())
  
  // Additional context
  reason        String?  // Optional reason for stage change
  notes         String?  // Any notes about the transition
  
  @@index([dealId])
  @@index([changedById])
  @@index([transitionAt])
  @@index([fromStage])
  @@index([toStage])
}
