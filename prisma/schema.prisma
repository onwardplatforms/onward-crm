// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  emailVerified  Boolean   @default(false)
  name           String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // CRM specific fields
  role      String   @default("member") // admin, member
  title     String?
  phone     String?
  isActive  Boolean  @default(true)

  // Auth relationships
  sessions  Session[]
  accounts  Account[]

  // Workspace relationships
  workspaces UserWorkspace[]

  // Owned records
  contacts   Contact[]
  companies  Company[]
  deals      Deal[]
  activities Activity[]
  
  // Assigned records
  assignedContacts Contact[] @relation("AssignedContacts")
  assignedCompanies Company[] @relation("AssignedCompanies")
  assignedDeals    Deal[]    @relation("AssignedDeals")
  assignedActivities Activity[] @relation("AssignedActivities")
  
  // Activities where this user was involved (participant)
  involvedActivities Activity[] @relation("ActivityParticipants")
  
  // Transitions made by this user
  dealTransitions  DealTransition[]
  
  // Notifications
  notifications        Notification[]
  notificationPreference NotificationPreference?
  
  // Workspace invites sent by this user
  sentInvites          WorkspaceInvite[]
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Workspace members
  users     UserWorkspace[]
  
  // Workspace invites
  invites   WorkspaceInvite[]
  
  // Workspace data
  contacts    Contact[]
  companies   Company[]
  deals       Deal[]
  activities  Activity[]
  notifications Notification[]
}

model UserWorkspace {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        String   @default("member") // owner, admin, member, viewer
  joinedAt    DateTime @default(now())
  removedAt   DateTime? // Soft delete - when user was removed from workspace
  removedById String?   // Who removed them (for audit trail)
  
  @@unique([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
  @@index([removedAt])
}

model WorkspaceInvite {
  id          String   @id @default(cuid())
  email       String
  role        String   @default("member") // "admin", "member"
  token       String   @unique @default(cuid())
  status      String   @default("pending") // "pending", "accepted", "declined", "expired"
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  invitedById String
  invitedBy   User @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  
  // Related notifications
  notifications Notification[]
  
  @@index([workspaceId])
  @@index([email])
  @@index([token])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Current workspace for this session
  currentWorkspaceId String?
  
  @@index([userId])
  @@index([token])
}

model Account {
  id                String   @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
  @@index([identifier])
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?
  phone       String?
  linkedinUrl String?
  title       String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedContacts", fields: [assignedToId], references: [id], onDelete: SetNull)

  deals      Deal[]
  activities Activity[] @relation("ActivityContacts")
  notifications Notification[]

  @@index([workspaceId])
  @@index([userId])
  @@index([companyId])
  @@index([assignedToId])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?
  linkedinUrl String?
  industry    String?
  size        String?
  location    String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedCompanies", fields: [assignedToId], references: [id], onDelete: SetNull)

  contacts   Contact[]
  deals      Deal[]
  notifications Notification[]

  @@index([workspaceId])
  @@index([userId])
  @@index([assignedToId])
}

model Deal {
  id          String    @id @default(cuid())
  name        String
  value       Float?
  licenses    Int       @default(1)
  stage       String    @default("lead")
  position    Int       @default(0)
  closeDate   DateTime?
  probability Int?      @default(0)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?  @relation("AssignedDeals", fields: [assignedToId], references: [id], onDelete: SetNull)

  activities Activity[]
  transitions DealTransition[]
  notifications Notification[]

  @@index([workspaceId])
  @@index([userId])
  @@index([companyId])
  @@index([contactId])
  @@index([assignedToId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // note, call, email, meeting
  subject     String
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Multiple contacts can be associated with an activity
  contacts    Contact[] @relation("ActivityContacts")

  dealId String?
  deal   Deal?   @relation(fields: [dealId], references: [id], onDelete: SetNull)

  // User who created this activity
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // User assigned to this activity
  assignedToId String?
  assignedTo   User?  @relation("AssignedActivities", fields: [assignedToId], references: [id], onDelete: SetNull)
  
  // Team members involved in this activity (participants)
  participants User[] @relation("ActivityParticipants")
  
  notifications Notification[]

  @@index([workspaceId])
  @@index([userId])
  @@index([dealId])
  @@index([date])
  @@index([assignedToId])
}

model DealTransition {
  id            String   @id @default(cuid())
  dealId        String
  deal          Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  
  fromStage     String?  // null for initial creation
  toStage       String
  fromPosition  Int?
  toPosition    Int
  
  // Track value and probability at time of transition
  value         Float?
  probability   Int?
  
  // Who made the change
  changedById   String?
  changedBy     User?    @relation(fields: [changedById], references: [id], onDelete: SetNull)
  
  // When it happened
  transitionAt  DateTime @default(now())
  
  // Additional context
  reason        String?  // Optional reason for stage change
  notes         String?  // Any notes about the transition
  
  @@index([dealId])
  @@index([changedById])
  @@index([transitionAt])
  @@index([fromStage])
  @@index([toStage])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "activity_reminder", "deal_update", "workspace_invite", "invite_accepted"
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional references
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  dealId     String?
  deal       Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  contactId  String?
  contact    Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  companyId  String?
  company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  inviteId   String?
  invite     WorkspaceInvite? @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  
  @@index([workspaceId])
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model NotificationPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityReminders   Boolean  @default(true)
  dealUpdates         Boolean  @default(true)
  atMentions          Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
